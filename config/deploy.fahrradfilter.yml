service: fahrradfilter

image: zealot128/fahrradfilter/master

aliases:
  console: app exec -r console -i "./bin/rails console"
  bash: app exec -r -i "bash"
  db: app exec -r -i "./bin/rails dbconsole -p"

# Deploy to these servers.
servers:
  web:
    - 5.75.182.70
  job:
    hosts:
      - 5.75.182.70
    cmd: ./bin/jobs

accessories:
  db:
    image: "postgres:16"
    hosts:
      - 5.75.182.70
    env: {}
    # port: "172.17.0.1:5432:5432"
    directories:
      - data:/var/lib/postgresql/data
    env:
      POSTGRES_HOST_AUTH_METHOD: trust
  redis:
    image: "redis:7.0"
    hosts:
      - 5.75.182.70
    # port: "172.17.0.1:6379:6379"
    directories:
      - "redis-data:/data"

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  ssl: false
  hosts:
    - fahrrad-filter.de
    - www.fahrrad-filter.de
  app_port: 80
  forward_headers: false
  # healthcheck:
  #   interval: 15
  #   timeout: 30

registry:
  server: registry.gitlab.com
  username: <%= ENV['CI_REGISTRY_USER'] || 'zealot128' %>
  password:
    - KAMAL_REGISTRY_PASSWORD


builder:
  arch:
    - amd64
  args:
    type: registry
    RUBY_VERSION: 3.3.5
    APP_NAME: fahrradfilter
    UID: 1000
    GID: 1000
    RAILS_ENV: production

env:
  clear:
    DATABASE_URL: "postgres://postgres@bikeparts-db:5432/bikeparts_production"
    # BLAZER_DATABASE_URL: "postgres://blazer@bikeparts-db:5432/bikeparts_production"
    REDIS_URL: "redis://bikeparts-redis:6379/0"
    RAILS_SERVE_STATIC_FILES: "true"
    RAILS_LOG_TO_STDOUT: "true"
    RAILS_ENV: production
    DB_BACKUP_DIR: /backup
    DB_BACKUP_KEEP: 7
  secret:
    - RAILS_MASTER_KEY
# ssh:
#   user: app

volumes:
  - "/opt/app_system:/rails/public/system"
  - "/backup:/backup"
  - "storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: valkey/valkey:8
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
